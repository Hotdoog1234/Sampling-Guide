{"version":3,"sources":["firebaseConfig.js","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","getDatabase","App","guideData","useState","data","category","setCategory","categories","uniqueValues","setUniqueValues","filteredData","setFilteredData","datesSampled","setDatesSampled","useEffect","values","Set","map","item","datesRef","ref","onValue","snapshot","val","React","createElement","className","src","alt","onChange","event","target","value","cat","index","key","selectedValue","filtered","filter","length","siteName","dateSampled","latitude","longitude","type","e","handleDateChange","date","prevDates","[object Object]","dateRef","set","then","console","log","catch","error","onClick","openGoogleMaps","lon","parseFloat","lat","isNaN","alert","url","window","open","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.dff9ba08.chunk.js","sourcesContent":["// src/firebaseConfig.js\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getDatabase } from \"firebase/database\";\r\n\r\n// Replace with your Firebase project configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyC204QZdHzbSPdoYjxGrUYEYmAUbZLArrA\",\r\n  authDomain: \"sampling-guide.firebaseapp.com\",\r\n  databaseURL: \"https://sampling-guide-default-rtdb.firebaseio.com\",\r\n  projectId: \"sampling-guide\",\r\n  storageBucket: \"sampling-guide.firebasestorage.app\",\r\n  messagingSenderId: \"505992154315\",\r\n  appId: \"1:505992154315:web:ab2933d28d049bf4779f4e\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n// Initialize Realtime Database\r\nconst database = getDatabase(app);\r\n\r\nexport default database;\r\n","import React, { useState, useEffect } from 'react';\r\nimport data from './data.json';\r\nimport database from './firebaseConfig'; // Import the Firebase configuration\r\nimport { ref, set, onValue } from \"firebase/database\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [guideData] = useState(data);\r\n  const [category, setCategory] = useState('');\r\n  const [categories] = useState([\r\n    \"Job Number\",\r\n    \"KPDES\\nPermit #\",\r\n    \"AI#\",\r\n    \"Site Name\",\r\n    \"Sampling Frequency\"\r\n  ]);\r\n  const [uniqueValues, setUniqueValues] = useState([]);\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [datesSampled, setDatesSampled] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (category) {\r\n      const values = [...new Set(guideData.map(item => item[category] || \"N/A\"))];\r\n      setUniqueValues(values);\r\n      setFilteredData([]);\r\n    }\r\n  }, [category, guideData]);\r\n\r\n  // Load initial data from Firebase in real time\r\n  useEffect(() => {\r\n    const datesRef = ref(database, \"dates\");\r\n    onValue(datesRef, (snapshot) => {\r\n      const data = snapshot.val() || {};\r\n      setDatesSampled(data);\r\n    });\r\n  }, []);\r\n\r\n  const handleCategoryChange = (event) => {\r\n    setCategory(event.target.value);\r\n  };\r\n\r\n  const handleValueChange = (event) => {\r\n    const selectedValue = event.target.value;\r\n    if (selectedValue) {\r\n      const filtered = guideData.filter(item => (item[category] || \"N/A\") === selectedValue);\r\n      setFilteredData(filtered);\r\n    } else {\r\n      setFilteredData([]);\r\n    }\r\n  };\r\n\r\n  const handleDateChange = (siteName, date) => {\r\n    setDatesSampled(prevDates => ({\r\n      ...prevDates,\r\n      [siteName]: date\r\n    }));\r\n\r\n    // Write the updated date to Firebase\r\n    const dateRef = ref(database, `dates/${siteName}`);\r\n    set(dateRef, { date })\r\n      .then(() => console.log(\"Date updated successfully!\"))\r\n      .catch((error) => console.error(\"Error updating date: \", error));\r\n  };\r\n\r\n  const openGoogleMaps = (longitude, latitude) => {\r\n    const lon = parseFloat(longitude);\r\n    const lat = parseFloat(latitude);\r\n\r\n    if (!isNaN(lat) && !isNaN(lon)) {\r\n      const url = `https://www.google.com/maps?q=${lat},${lon}`;\r\n      window.open(url, '_blank');\r\n    } else {\r\n      alert(\"Latitude and Longitude not available or not in the correct format for this site.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <header>\r\n        <img src={`${process.env.PUBLIC_URL}/logo.jpg`} alt=\"Company Logo\" className=\"company-logo\" />\r\n        <h1>Sampling Guide</h1>\r\n      </header>\r\n      <main>\r\n        <div>\r\n          <label>Select Category:</label>\r\n          <select onChange={handleCategoryChange} value={category}>\r\n            <option value=\"\">--Select--</option>\r\n            {categories.map((cat, index) => (\r\n              <option key={index} value={cat}>{cat}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        {category && (\r\n          <div>\r\n            <label>Select Value:</label>\r\n            <select onChange={handleValueChange}>\r\n              <option value=\"\">--Select--</option>\r\n              {uniqueValues.map((val, index) => (\r\n                <option key={index} value={val}>{val}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        )}\r\n\r\n        <section>\r\n          {filteredData.length > 0 ? (\r\n            filteredData.map((item, index) => {\r\n              const siteName = item[\"Site Name\"];\r\n              const dateSampled = datesSampled[siteName] || \"\";\r\n              const latitude = item[\"Latitude\"];\r\n              const longitude = item[\"Longitude\"];\r\n\r\n              return (\r\n                <div key={index} className=\"data-entry\">\r\n                  <h3>Entry {index + 1}</h3>\r\n                  <p><strong>Job Number:</strong> {item[\"Job Number\"] || \"N/A\"}</p>\r\n                  <p><strong>Permit #:</strong> {item[\"KPDES\\nPermit #\"] || \"N/A\"}</p>\r\n                  <p><strong>AI #:</strong> {item[\"AI#\"] || \"N/A\"}</p>\r\n                  <p><strong>Site Name:</strong> {siteName || \"N/A\"}</p>\r\n                  <p><strong>DMR Official:</strong> {item[\"DMR Official \\n(Phone #)\"] || \"N/A\"}</p>\r\n                  <p><strong>Address:</strong> {item[\"Address\"] || \"N/A\"}</p>\r\n                  <p><strong>Latitude:</strong> {latitude || \"N/A\"}</p>\r\n                  <p><strong>Longitude:</strong> {longitude || \"N/A\"}</p>\r\n                  <p><strong>Outfall #:</strong> {item[\"Outfall #\"] || \"N/A\"}</p>\r\n                  <p><strong>Sampling Frequency:</strong> {item[\"Sampling Frequency\"] || \"N/A\"}</p>\r\n                  <p><strong>Sampling Status:</strong> {item[\"Sampling Status\"] || \"N/A\"}</p>\r\n                  <p><strong>Parameters:</strong> {item[\"Parameters\"] || \"N/A\"}</p>\r\n                  <label><strong>Date Sampled:</strong></label>\r\n                  <input \r\n                    type=\"date\" \r\n                    value={dateSampled} \r\n                    onChange={(e) => handleDateChange(siteName, e.target.value)} \r\n                  />\r\n                  <br />\r\n                  <button onClick={() => openGoogleMaps(latitude, longitude)}>Google Maps</button>\r\n                  <hr />\r\n                </div>\r\n              );\r\n            })\r\n          ) : (\r\n            <p>Please select a category and a value to display results.</p>\r\n          )}\r\n        </section>\r\n      </main>\r\n      <footer>\r\n        <p>&copy; 2024 Sampling Guide</p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}