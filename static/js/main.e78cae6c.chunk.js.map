{"version":3,"sources":["firebaseConfig.js","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","getDatabase","setLogLevel","App","guideData","useState","data","category","setCategory","categories","uniqueValues","setUniqueValues","filteredData","setFilteredData","datesSampled","setDatesSampled","samplerNames","setSamplerNames","useEffect","values","Set","map","item","datesRef","ref","onValue","snapshot","val","console","log","samplerRef","React","createElement","className","src","alt","onClick","exportToExcel","excelData","Object","keys","siteName","_samplerNames$siteNam","SiteName","DateSampled","date","Sampler","samplerName","ws","XLSX","json_to_sheet","wb","book_new","book_append_sheet","excelFile","bookType","type","saveAs","Blob","onChange","event","target","value","cat","index","key","selectedValue","filtered","filter","length","_datesSampled$sanitiz","_samplerNames$sanitiz","sanitizedSiteName","replace","dateSampled","latitude","longitude","e","handleDateChange","dateRef","set","then","catch","error","handleSamplingChange","placeholder","openGoogleMaps","lon","parseFloat","lat","isNaN","alert","url","window","open","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.e78cae6c.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getDatabase } from \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyC204QZdHzbSPdoYjxGrUYEYmAUbZLArrA\",\r\n  authDomain: \"sampling-guide.firebaseapp.com\",\r\n  databaseURL: \"https://sampling-guide-default-rtdb.firebaseio.com\",\r\n  projectId: \"sampling-guide\",\r\n  storageBucket: \"sampling-guide.appspot.com\",\r\n  messagingSenderId: \"505992154315\",\r\n  appId: \"1:505992154315:web:ab2933d28d049bf4779f4e\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst database = getDatabase(app);\r\n\r\nexport default database;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { saveAs } from 'file-saver'; // For downloading the file\r\nimport * as XLSX from 'xlsx'; // Import xlsx for Excel export\r\nimport { setLogLevel } from \"firebase/app\";\r\nimport { ref, set, onValue } from \"firebase/database\";\r\nimport database from \"./firebaseConfig\"; // Import Firebase configuration\r\nimport data from \"./data.json\"; // Import your data\r\nimport \"./App.css\";\r\n\r\n// Enable Firebase Debug Logs\r\nsetLogLevel(\"debug\");\r\n\r\nfunction App() {\r\n  const [guideData] = useState(data);\r\n  const [category, setCategory] = useState('');\r\n  const [categories] = useState([\r\n    \"Job Number\",\r\n    \"KPDES\\nPermit #\",\r\n    \"AI#\",\r\n    \"Site Name\",\r\n    \"Sampling Frequency\"\r\n  ]);\r\n  const [uniqueValues, setUniqueValues] = useState([]);\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [datesSampled, setDatesSampled] = useState({});\r\n  const [samplerNames, setSamplerNames] = useState({}); // New state for storing sampler names\r\n\r\n  useEffect(() => {\r\n    if (category) {\r\n      const values = [...new Set(guideData.map(item => item[category] || \"N/A\"))];\r\n      setUniqueValues(values);\r\n      setFilteredData([]);\r\n    }\r\n  }, [category, guideData]);\r\n\r\n  // Fetch data from Firebase in real-time\r\n  useEffect(() => {\r\n    const datesRef = ref(database, \"dates\");\r\n    onValue(datesRef, (snapshot) => {\r\n      const data = snapshot.val() || {};\r\n      console.log(\"Fetched dates from Firebase:\", data); // Debug log\r\n      setDatesSampled(data); // Update the state\r\n    });\r\n\r\n    const samplerRef = ref(database, \"samplers\"); // Fetch sampler names\r\n    onValue(samplerRef, (snapshot) => {\r\n      const data = snapshot.val() || {};\r\n      console.log(\"Fetched sampler names from Firebase:\", data); // Debug log\r\n      setSamplerNames(data); // Update the state\r\n    });\r\n  }, []);\r\n\r\n  const handleCategoryChange = (event) => {\r\n    setCategory(event.target.value);\r\n  };\r\n\r\n  const handleValueChange = (event) => {\r\n    const selectedValue = event.target.value;\r\n    if (selectedValue) {\r\n      const filtered = guideData.filter(item => (item[category] || \"N/A\") === selectedValue);\r\n      setFilteredData(filtered);\r\n    } else {\r\n      setFilteredData([]);\r\n    }\r\n  };\r\n\r\n  const handleDateChange = (siteName, date) => {\r\n    // Sanitize the siteName by replacing invalid characters\r\n    const sanitizedSiteName = siteName.replace(/[.#$[\\]]/g, \"_\");\r\n\r\n    console.log(\"Attempting to write to Firebase:\", { siteName, date });\r\n\r\n    const dateRef = ref(database, `dates/${sanitizedSiteName}`);\r\n    set(dateRef, { date })\r\n      .then(() => {\r\n        console.log(\"Successfully written to Firebase:\", { sanitizedSiteName, date });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error writing to Firebase:\", error);\r\n      });\r\n  };\r\n\r\n  // Handle the change of sampler name input\r\n  const handleSamplingChange = (siteName, samplerName) => {\r\n    const sanitizedSiteName = siteName.replace(/[.#$[\\]]/g, \"_\");\r\n\r\n    console.log(\"Attempting to write sampler to Firebase:\", { siteName, samplerName });\r\n\r\n    const samplerRef = ref(database, `samplers/${sanitizedSiteName}`);\r\n    set(samplerRef, { samplerName })\r\n      .then(() => {\r\n        console.log(\"Successfully written sampler to Firebase:\", { sanitizedSiteName, samplerName });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error writing sampler to Firebase:\", error);\r\n      });\r\n  };\r\n\r\n  const openGoogleMaps = (longitude, latitude) => {\r\n    const lon = parseFloat(longitude);\r\n    const lat = parseFloat(latitude);\r\n\r\n    if (!isNaN(lat) && !isNaN(lon)) {\r\n      const url = `https://www.google.com/maps?q=${lat},${lon}`;\r\n      window.open(url, '_blank');\r\n    } else {\r\n      alert(\"Latitude and Longitude not available or not in the correct format for this site.\");\r\n    }\r\n  };\r\n\r\n  // Function to export data to Excel\r\n  const exportToExcel = () => {\r\n    // Prepare the data structure for Excel\r\n    const excelData = Object.keys(datesSampled).map((siteName) => ({\r\n      SiteName: siteName,\r\n      DateSampled: datesSampled[siteName].date,\r\n      Sampler: samplerNames[siteName]?.samplerName || \"N/A\" // Adding sampler name to the data\r\n    }));\r\n\r\n    // Create a new worksheet from the data\r\n    const ws = XLSX.utils.json_to_sheet(excelData);\r\n\r\n    // Create a new workbook\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"Site Data\");\r\n\r\n    // Write the workbook to a file\r\n    const excelFile = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n\r\n    // Use file-saver to download the file\r\n    saveAs(new Blob([excelFile]), \"sampling_guide_data.xlsx\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <header>\r\n        <img src={`${process.env.PUBLIC_URL}/logo.jpg`} alt=\"Company Logo\" className=\"company-logo\" />\r\n        <h1>Sampling Guide</h1>\r\n      </header>\r\n      <main>\r\n        <button onClick={exportToExcel}>Export to Excel</button>\r\n\r\n        <div>\r\n          <label>Select Category:</label>\r\n          <select onChange={handleCategoryChange} value={category}>\r\n            <option value=\"\">--Select--</option>\r\n            {categories.map((cat, index) => (\r\n              <option key={index} value={cat}>{cat}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        {category && (\r\n          <div>\r\n            <label>Select Value:</label>\r\n            <select onChange={handleValueChange}>\r\n              <option value=\"\">--Select--</option>\r\n              {uniqueValues.map((val, index) => (\r\n                <option key={index} value={val}>{val}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        )}\r\n\r\n        <section>\r\n          {filteredData.length > 0 ? (\r\n            filteredData.map((item, index) => {\r\n              const siteName = item[\"Site Name\"];\r\n              const sanitizedSiteName = siteName.replace(/[.#$[\\]]/g, \"_\");\r\n              const dateSampled = datesSampled[sanitizedSiteName]?.date || \"\";\r\n              const samplerName = samplerNames[sanitizedSiteName]?.samplerName || \"\"; // Get sampler name\r\n              const latitude = item[\"Latitude\"];\r\n              const longitude = item[\"Longitude\"];\r\n\r\n              return (\r\n                <div key={index} className=\"data-entry\">\r\n                  <h3>Entry {index + 1}</h3>\r\n                  <p><strong>Job Number:</strong> {item[\"Job Number\"] || \"N/A\"}</p>\r\n                  <p><strong>Permit #:</strong> {item[\"KPDES\\nPermit #\"] || \"N/A\"}</p>\r\n                  <p><strong>AI #:</strong> {item[\"AI#\"] || \"N/A\"}</p>\r\n                  <p><strong>Site Name:</strong> {siteName || \"N/A\"}</p>\r\n                  <p><strong>DMR Official:</strong> {item[\"DMR Official \\n(Phone #)\"] || \"N/A\"}</p>\r\n                  <p><strong>Address:</strong> {item[\"Address\"] || \"N/A\"}</p>\r\n                  <p><strong>Latitude:</strong> {latitude || \"N/A\"}</p>\r\n                  <p><strong>Longitude:</strong> {longitude || \"N/A\"}</p>\r\n                  <p><strong>Outfall #:</strong> {item[\"Outfall #\"] || \"N/A\"}</p>\r\n                  <p><strong>Sampling Frequency:</strong> {item[\"Sampling Frequency\"] || \"N/A\"}</p>\r\n                  <p><strong>Sampling Status:</strong> {item[\"Sampling Status\"] || \"N/A\"}</p>\r\n                  <p><strong>Parameters:</strong> {item[\"Parameters\"] || \"N/A\"}</p>\r\n\r\n                  <label><strong>Date Sampled:</strong></label>\r\n                  <input \r\n                    type=\"date\" \r\n                    value={dateSampled} \r\n                    onChange={(e) => handleDateChange(siteName, e.target.value)} \r\n                  />\r\n                  <br />\r\n\r\n                  <label><strong>Who did the Sampling:</strong></label>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={samplerName}\r\n                    onChange={(e) => handleSamplingChange(siteName, e.target.value)}\r\n                    placeholder=\"Enter name\"\r\n                  />\r\n                  <br />\r\n\r\n                  <button onClick={() => openGoogleMaps(latitude, longitude)}>Google Maps</button>\r\n                  <hr />\r\n                </div>\r\n              );\r\n            })\r\n          ) : (\r\n            <p>Please select a category and a value to display results.</p>\r\n          )}\r\n        </section>\r\n      </main>\r\n      <footer>\r\n        <p>&copy; 2024 Shield Environmental Associates Sampling Guide</p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}