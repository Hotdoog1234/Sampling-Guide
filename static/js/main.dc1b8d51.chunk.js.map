{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","guideData","useState","data","category","setCategory","categories","uniqueValues","setUniqueValues","filteredData","setFilteredData","datesSampled","setDatesSampled","useEffect","values","Set","map","item","initialDates","forEach","siteName","localStorage","getItem","React","createElement","className","src","alt","onChange","event","target","value","cat","index","key","selectedValue","filtered","filter","val","length","dateSampled","latitude","longitude","type","e","handleDateChange","date","prevDates","[object Object]","setItem","onClick","openGoogleMaps","lon","parseFloat","lat","isNaN","alert","url","window","open","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.dc1b8d51.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport data from './data.json';\nimport './App.css';\n\nfunction App() {\n  const [guideData] = useState(data);\n  const [category, setCategory] = useState('');\n  const [categories] = useState([\n    \"Job Number\",\n    \"KPDES\\nPermit #\",\n    \"AI#\",\n    \"Site Name\",\n    \"Sampling Frequency\"\n  ]);\n  const [uniqueValues, setUniqueValues] = useState([]);\n  const [filteredData, setFilteredData] = useState([]); // Start with an empty array\n  const [datesSampled, setDatesSampled] = useState({});\n\n  useEffect(() => {\n    if (category) {\n      const values = [...new Set(guideData.map(item => item[category] || \"N/A\"))];\n      setUniqueValues(values);\n      setFilteredData([]); // Reset filtered data when category changes\n    }\n  }, [category, guideData]);\n\n  // Load initial dates from localStorage\n  useEffect(() => {\n    const initialDates = {};\n    guideData.forEach(item => {\n      const siteName = item[\"Site Name\"];\n      if (siteName) {\n        initialDates[siteName] = localStorage.getItem(`dateSampled-${siteName}`) || \"\";\n      }\n    });\n    setDatesSampled(initialDates);\n  }, [guideData]);\n\n  const handleCategoryChange = (event) => {\n    setCategory(event.target.value);\n  };\n\n  const handleValueChange = (event) => {\n    const selectedValue = event.target.value;\n    if (selectedValue) {\n      const filtered = guideData.filter(item => (item[category] || \"N/A\") === selectedValue);\n      setFilteredData(filtered);\n    } else {\n      setFilteredData([]);\n    }\n  };\n\n  const handleDateChange = (siteName, date) => {\n    setDatesSampled(prevDates => ({\n      ...prevDates,\n      [siteName]: date\n    }));\n    localStorage.setItem(`dateSampled-${siteName}`, date);\n  };\n\n  const openGoogleMaps = (longitude, latitude) => {\nconst lon = parseFloat(longitude);    \nconst lat = parseFloat(latitude);\n\n    if (!isNaN(lat) && !isNaN(lon)) {\n      const url = `https://www.google.com/maps?q=${lat},${lon}`;\n      window.open(url, '_blank');\n    } else {\n      alert(\"Latitude and Longitude not available or not in the correct format for this site.\");\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <header>\n        <img src={`${process.env.PUBLIC_URL}/logo.jpg`} alt=\"Company Logo\" className=\"company-logo\" />\n        <h1>Sampling Guide</h1>\n      </header>\n      <main>\n        <div>\n          <label>Select Category:</label>\n          <select onChange={handleCategoryChange} value={category}>\n            <option value=\"\">--Select--</option>\n            {categories.map((cat, index) => (\n              <option key={index} value={cat}>{cat}</option>\n            ))}\n          </select>\n        </div>\n\n        {category && (\n          <div>\n            <label>Select Value:</label>\n            <select onChange={handleValueChange}>\n              <option value=\"\">--Select--</option>\n              {uniqueValues.map((val, index) => (\n                <option key={index} value={val}>{val}</option>\n              ))}\n            </select>\n          </div>\n        )}\n\n        <section>\n          {filteredData.length > 0 ? (\n            filteredData.map((item, index) => {\n              const siteName = item[\"Site Name\"];\n              const dateSampled = datesSampled[siteName] || \"\";\n              const latitude = item[\"Latitude\"];\n              const longitude = item[\"Longitude\"];\n\n              return (\n                <div key={index} className=\"data-entry\">\n                  <h3>Entry {index + 1}</h3>\n                  <p><strong>Job Number:</strong> {item[\"Job Number\"] || \"N/A\"}</p>\n                  <p><strong>Permit #:</strong> {item[\"KPDES\\nPermit #\"] || \"N/A\"}</p>\n                  <p><strong>AI #:</strong> {item[\"AI#\"] || \"N/A\"}</p>\n                  <p><strong>Site Name:</strong> {siteName || \"N/A\"}</p>\n                  <p><strong>DMR Official:</strong> {item[\"DMR Official \\n(Phone #)\"] || \"N/A\"}</p>\n                  <p><strong>Address:</strong> {item[\"Address\"] || \"N/A\"}</p>\n                  <p><strong>Latitude:</strong> {latitude || \"N/A\"}</p>\n                  <p><strong>Longitude:</strong> {longitude || \"N/A\"}</p>\n                  <p><strong>Outfall #:</strong> {item[\"Outfall #\"] || \"N/A\"}</p>\n                  <p><strong>Sampling Frequency:</strong> {item[\"Sampling Frequency\"] || \"N/A\"}</p>\n                  <p><strong>Sampling Status:</strong> {item[\"Sampling Status\"] || \"N/A\"}</p>\n                  <p><strong>Parameters:</strong> {item[\"Parameters\"] || \"N/A\"}</p>\n                  <label><strong>Date Sampled:</strong></label>\n                  <input \n                    type=\"date\" \n                    value={dateSampled} \n                    onChange={(e) => handleDateChange(siteName, e.target.value)} \n                  />\n                  <br />\n                  <button onClick={() => openGoogleMaps(latitude, longitude)}>Google Maps</button>\n                  <hr />\n                </div>\n              );\n            })\n          ) : (\n            <p>Please select a category and a value to display results.</p>\n          )}\n        </section>\n      </main>\n      <footer>\n        <p>&copy; 2024 Sampling Guide</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}